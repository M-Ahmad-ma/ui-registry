{
  "name": "My UI Registry",
  "version": "1.0.0",
  "blocks": [
    {
      "id": "hero-threejs",
      "title": "Hero Section 3D",
      "description": "Hero section with Three.js, shaders, and floating particles",
      "code": "function HeroSection() {\n  const { useRef, useMemo } = React;\n  const { Canvas, useFrame } = ReactThreeFiber;\n  const { OrbitControls, Environment } = Drei;\n\n  const vertexShader = `\nuniform float uTime;\nuniform vec2 uMouse;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvoid main() {\n  vUv = uv;\n  vPosition = position;\n  vec3 pos = position;\n  float wave = sin(pos.x * 2.0 + uTime) * cos(pos.y * 2.0 + uTime) * 0.1;\n  float mouseInfluence = length(uMouse - pos.xy) * 0.5;\n  pos.z += wave + sin(mouseInfluence + uTime) * 0.05;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}`;\n\n  const fragmentShader = `\nuniform float uTime;\nuniform vec2 uMouse;\nuniform vec3 uColor1;\nuniform vec3 uColor2;\nuniform vec3 uColor3;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvoid main() {\n  vec2 uv = vUv;\n  float gradient1 = sin(uv.x * 3.0 + uTime * 0.5) * cos(uv.y * 3.0 + uTime * 0.3);\n  float gradient2 = sin(uv.x * 5.0 - uTime * 0.7) * cos(uv.y * 2.0 + uTime * 0.4);\n  vec2 mouseUv = uMouse * 0.5 + 0.5;\n  float mouseDistance = distance(uv, mouseUv);\n  float mouseEffect = 1.0 - smoothstep(0.0, 0.5, mouseDistance);\n  float mixFactor = (gradient1 + gradient2) * 0.5 + 0.5 + mouseEffect * 0.3;\n  vec3 color = mix(uColor1, uColor2, mixFactor);\n  color = mix(color, uColor3, sin(uTime * 0.5) * 0.5 + 0.5);\n  float noise = fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n  color += noise * 0.05;\n  gl_FragColor = vec4(color, 0.8);\n}`;\n\n  const CustomShaderMaterial = () => {\n    const materialRef = useRef();\n    const uniforms = useMemo(() => ({\n      uTime: { value: 0 },\n      uMouse: { value: [0,0] },\n      uColor1: { value: [0.082,0.502,0.239] },\n      uColor2: { value: [0.518,0.8,0.086] },\n      uColor3: { value: [0.941,1.0,0.957] },\n    }), []);\n\n    useFrame(state => {\n      if(materialRef.current){\n        materialRef.current.uniforms.uTime.value = state.clock.elapsedTime;\n        materialRef.current.uniforms.uMouse.value = [\n          (state.mouse.x * state.viewport.width)/2,\n          (state.mouse.y * state.viewport.height)/2\n        ];\n      }\n    });\n\n    return <shaderMaterial ref={materialRef} vertexShader={vertexShader} fragmentShader={fragmentShader} uniforms={uniforms} transparent />;\n  };\n\n  const AnimatedMesh = () => (\n    <mesh rotation={[0,0,0]} scale={[4,3,1]}>\n      <planeGeometry args={[2,2,32,32]} />\n      <CustomShaderMaterial />\n    </mesh>\n  );\n\n  const FloatingParticles = () => {\n    const particles = Array.from({ length: 50 }, (_,i) => (\n      <mesh key={i} position={[(Math.random()-0.5)*10,(Math.random()-0.5)*10,(Math.random()-0.5)*5]} scale={Math.random()*0.1+0.05}>\n        <sphereGeometry args={[1,8,8]} />\n        <meshBasicMaterial color=\"#84cc16\" transparent opacity={0.6} />\n      </mesh>\n    ));\n    return <group>{particles}</group>;\n  };\n\n  return (\n    <div className=\"relative w-full h-screen overflow-hidden\">\n      <div className=\"absolute inset-0 w-full h-screen\">\n        <Canvas camera={{ position:[0,0,5], fov:75 }} style={{ background:'transparent' }}>\n          <Environment preset=\"dawn\" />\n          <ambientLight intensity={0.5} />\n          <pointLight position={[10,10,10]} intensity={1} />\n          <AnimatedMesh />\n          <FloatingParticles />\n          <OrbitControls enableZoom={false} enablePan={false} enableRotate autoRotate autoRotateSpeed={0.5} />\n        </Canvas>\n      </div>\n      <div className=\"relative z-10 flex flex-col items-center justify-center min-h-screen text-center px-4\">\n        <h1 className=\"text-5xl md:text-7xl font-bold text-foreground leading-tight\">\n          Experience the <span className=\"bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">Future</span> of Web Technology\n        </h1>\n      </div>\n    </div>\n  );\n}\n export default HeroSection;",
      "tags": ["threejs", "shader", "hero"],
      "dependencies": [
        "@react-three/fiber",
        "three",
        "@react-three/drei",
        "framer-motion"
      ],
      "imports": [
        "import React from 'react';",
        "import { Canvas, useFrame } from '@react-three/fiber';",
        "import { OrbitControls, Environment } from '@react-three/drei';",
        "import { motion } from 'framer-motion';"
      ]
    },
    {
      "id": "hero-motion",
      "title": "Hero Motion",
      "description": "Framer Motion hero header",
      "code": "function HeroMotion() {\n  return (\n    <div className=\"relative overflow-hidden rounded-2xl p-10 bg-gradient-to-br from-indigo-600 to-fuchsia-600\">\n      <motion.h1 initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }} className=\"text-4xl font-bold\">\n        Motion Hero\n      </motion.h1>\n      <motion.p initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.2 }} className=\"mt-2 text-white/80\">\n        Smooth and GPU-accelerated.\n      </motion.p>\n    </div>\n  );\n}\nexport default HeroMotion",
      "tags": ["motion", "hero"],
      "dependencies": ["framer-motion"],
      "imports": [
        "import { motion } from 'framer-motion';",
        "import React from 'react';"
      ]
    },
    {
      "id": "pricing-simple",
      "title": "Pricing (Simple)",
      "description": "Clean pricing cards",
      "code": "function PricingSimple() {\n  return (\n    <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {[\"Basic\",\"Pro\",\"Team\"].map((tier, i) => (\n        <div key={tier} className=\"rounded-2xl p-6 bg-white/5 ring-1 ring-white/10\">\n          <div className=\"text-xl font-semibold\">{tier}</div>\n          <div className=\"mt-2 text-3xl font-bold\">{i * 9 + 9}<span className=\"text-base font-normal text-white/60\">/mo</span></div>\n          <button className=\"mt-4 w-full rounded-xl bg-white/10 hover:bg-white/20 py-2\">Choose</button>\n        </div>\n      ))}\n    </div>\n  );\n}\n export default PricingSimple",
      "tags": ["pricing"],
      "dependencies": [],
      "imports": ["import React from 'react';"]
    },

{
  "id": "stunning-carousel",
  "title": "Stunning Carousel",
  "description": "A responsive, animated image carousel with Framer Motion and Tailwind CSS.",
  "code": "export function StunningCarousel() {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isAutoPlaying, setIsAutoPlaying] = useState(true);\n\n  const nextSlide = () => {\n    setCurrentIndex((prevIndex) => (prevIndex + 1) % slides.length);\n  };\n\n  const prevSlide = () => {\n    setCurrentIndex((prevIndex) => (prevIndex - 1 + slides.length) % slides.length);\n  };\n\n  const goToSlide = (index) => {\n    setCurrentIndex(index);\n  };\n\n  useEffect(() => {\n    if (!isAutoPlaying) return;\n    const interval = setInterval(() => {\n      nextSlide();\n    }, 4000);\n    return () => clearInterval(interval);\n  }, [isAutoPlaying, currentIndex]);\n\n  const slideVariants = {\n    enter: (direction: number) => ({ x: direction > 0 ? 1000 : -1000, opacity: 0, scale: 0.8 }),\n    center: { zIndex: 1, x: 0, opacity: 1, scale: 1 },\n    exit: (direction: number) => ({ zIndex: 0, x: direction < 0 ? 1000 : -1000, opacity: 0, scale: 0.8 })\n  };\n\n  return (\n    <div className=\"relative w-full max-w-6xl mx-auto\">\n      <div\n        className=\"relative h-[500px] overflow-hidden rounded-xl bg-card shadow-2xl\"\n        onMouseEnter={() => setIsAutoPlaying(false)}\n        onMouseLeave={() => setIsAutoPlaying(true)}\n      >\n        <AnimatePresence initial={false} custom={currentIndex}>\n          <motion.div\n            key={currentIndex}\n            custom={currentIndex}\n            variants={slideVariants}\n            initial=\"enter\"\n            animate=\"center\"\n            exit=\"exit\"\n            transition={{ x: { type: 'spring', stiffness: 300, damping: 30 }, opacity: { duration: 0.2 }, scale: { duration: 0.4 } }}\n            drag=\"x\"\n            dragConstraints={{ left: 0, right: 0 }}\n            dragElastic={1}\n            onDragEnd={(e, { offset, velocity }) => {\n              const swipe = Math.abs(offset.x) * velocity.x;\n              if (swipe < -10000) nextSlide();\n              else if (swipe > 10000) prevSlide();\n            }}\n            className=\"absolute inset-0 w-full h-full cursor-grab active:cursor-grabbing\"\n          >\n            <Card className=\"relative w-full h-full border-0 rounded-xl overflow-hidden group\">\n              <div className=\"absolute inset-0\">\n                <img src={slides[currentIndex].image} alt={slides[currentIndex].title} className=\"w-full h-full object-cover transition-transform duration-700 group-hover:scale-105\" />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent\" />\n              </div>\n              <div className=\"relative z-10 flex flex-col justify-end h-full p-8 text-white\">\n                <motion.div initial={{ y: 20, opacity: 0 }} animate={{ y: 0, opacity: 1 }} transition={{ delay: 0.3, duration: 0.6 }}>\n                  <span className=\"inline-block px-3 py-1 mb-4 text-sm font-medium bg-primary rounded-full\">{slides[currentIndex].category}</span>\n                  <h2 className=\"text-4xl font-bold mb-4 text-balance\">{slides[currentIndex].title}</h2>\n                  <p className=\"text-lg text-gray-200 max-w-2xl text-pretty\">{slides[currentIndex].description}</p>\n                </motion.div>\n              </div>\n            </Card>\n          </motion.div>\n        </AnimatePresence>\n\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"absolute inset-y-0 left-4 flex items-center\">\n          <Button variant=\"ghost\" size=\"icon\" onClick={prevSlide} className=\"h-12 w-12 rounded-full bg-white/20 backdrop-blur-sm border border-white/30 text-white hover:bg-white/30 hover:scale-110 transition-all duration-200\">\n            <ChevronLeft className=\"h-6 w-6\" />\n          </Button>\n        </motion.div>\n\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"absolute inset-y-0 right-4 flex items-center\">\n          <Button variant=\"ghost\" size=\"icon\" onClick={nextSlide} className=\"h-12 w-12 rounded-full bg-white/20 backdrop-blur-sm border border-white/30 text-white hover:bg-white/30 hover:scale-110 transition-all duration-200\">\n            <ChevronRight className=\"h-6 w-6\" />\n          </Button>\n        </motion.div>\n      </div>\n\n      <div className=\"flex justify-center mt-6 space-x-2\">\n        {slides.map((_, index) => (\n          <button key={index} onClick={() => goToSlide(index)} className={`relative h-2 rounded-full transition-all duration-300 ${index === currentIndex ? 'w-8 bg-primary' : 'w-2 bg-muted-foreground/30 hover:bg-muted-foreground/50'}`} />\n        ))}\n      </div>\n\n      <div className=\"flex justify-center mt-8 space-x-4 overflow-x-auto pb-4\">\n        {slides.map((slide, index) => (\n          <motion.button key={slide.id} onClick={() => goToSlide(index)} className={`relative flex-shrink-0 w-20 h-20 rounded-lg overflow-hidden border-2 transition-all duration-300 ${index === currentIndex ? 'border-primary shadow-lg scale-110' : 'border-border hover:border-primary/50 hover:scale-105'}`} whileHover={{ scale: index === currentIndex ? 1.1 : 1.05 }} whileTap={{ scale: 0.95 }}>\n            <img src={slide.image} alt={slide.title} className=\"w-full h-full object-cover\" />\n            {index === currentIndex && <div className=\"absolute inset-0 bg-primary/20\" />}\n          </motion.button>\n        ))}\n      </div>\n    </div>\n  );\n}",
  "tags": ["carousel", "framer-motion", "react", "tailwindcss", "ui"],
  "dependencies": [
    "framer-motion",
    "lucide-react",
    "react",
    "tailwindcss",
    "clsx"
  ],
  "imports": [
    "import { useState, useEffect } from 'react';",
    "import { motion, AnimatePresence } from 'framer-motion';",
    "import { ChevronLeft, ChevronRight } from 'lucide-react';",
    "import { Button } from '@/components/ui/button';",
    "import { Card } from '@/components/ui/card';"
  ]
}
  ]
}
